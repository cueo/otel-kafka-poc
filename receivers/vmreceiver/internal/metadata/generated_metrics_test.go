// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver/receivertest"
	"go.uber.org/zap"
	"go.uber.org/zap/zaptest/observer"
)

type testConfigCollection int

const (
	testSetDefault testConfigCollection = iota
	testSetAll
	testSetNone
)

func TestMetricsBuilder(t *testing.T) {
	tests := []struct {
		name      string
		configSet testConfigCollection
	}{
		{
			name:      "default",
			configSet: testSetDefault,
		},
		{
			name:      "all_set",
			configSet: testSetAll,
		},
		{
			name:      "none_set",
			configSet: testSetNone,
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			start := pcommon.Timestamp(1_000_000_000)
			ts := pcommon.Timestamp(1_000_001_000)
			observedZapCore, observedLogs := observer.New(zap.WarnLevel)
			settings := receivertest.NewNopCreateSettings()
			settings.Logger = zap.New(observedZapCore)
			mb := NewMetricsBuilder(loadMetricsBuilderConfig(t, test.name), settings, WithStartTime(start))

			expectedWarnings := 0

			assert.Equal(t, expectedWarnings, observedLogs.Len())

			defaultMetricsCount := 0
			allMetricsCount := 0

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordActiveDataPoint(ts, 1, "hostname-val", "os-val", "arch-val", "type-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordBlocksReceivedDataPoint(ts, 1, "hostname-val", "os-val", "arch-val", "type-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordBlocksSentDataPoint(ts, 1, "hostname-val", "os-val", "arch-val", "type-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordBufferedDataPoint(ts, 1, "hostname-val", "os-val", "arch-val", "type-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordCachedDataPoint(ts, 1, "hostname-val", "os-val", "arch-val", "type-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordContextSwitchesDataPoint(ts, 1, "hostname-val", "os-val", "arch-val", "type-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordFreeDataPoint(ts, 1, "hostname-val", "os-val", "arch-val", "type-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordIdleTimeDataPoint(ts, 1, "hostname-val", "os-val", "arch-val", "type-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordInactiveDataPoint(ts, 1, "hostname-val", "os-val", "arch-val", "type-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordInterruptsDataPoint(ts, 1, "hostname-val", "os-val", "arch-val", "type-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordIoWaitTimeDataPoint(ts, 1, "hostname-val", "os-val", "arch-val", "type-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordRunnableProcsDataPoint(ts, 1, "hostname-val", "os-val", "arch-val", "type-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordStolenTimeDataPoint(ts, 1, "hostname-val", "os-val", "arch-val", "type-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSwapInDataPoint(ts, 1, "hostname-val", "os-val", "arch-val", "type-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSwapOutDataPoint(ts, 1, "hostname-val", "os-val", "arch-val", "type-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSwappedDataPoint(ts, 1, "hostname-val", "os-val", "arch-val", "type-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemTimeDataPoint(ts, 1, "hostname-val", "os-val", "arch-val", "type-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordTotalProcsDataPoint(ts, 1, "hostname-val", "os-val", "arch-val", "type-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordUserTimeDataPoint(ts, 1, "hostname-val", "os-val", "arch-val", "type-val")

			res := pcommon.NewResource()
			metrics := mb.Emit(WithResource(res))

			if test.configSet == testSetNone {
				assert.Equal(t, 0, metrics.ResourceMetrics().Len())
				return
			}

			assert.Equal(t, 1, metrics.ResourceMetrics().Len())
			rm := metrics.ResourceMetrics().At(0)
			assert.Equal(t, res, rm.Resource())
			assert.Equal(t, 1, rm.ScopeMetrics().Len())
			ms := rm.ScopeMetrics().At(0).Metrics()
			if test.configSet == testSetDefault {
				assert.Equal(t, defaultMetricsCount, ms.Len())
			}
			if test.configSet == testSetAll {
				assert.Equal(t, allMetricsCount, ms.Len())
			}
			validatedMetrics := make(map[string]bool)
			for i := 0; i < ms.Len(); i++ {
				switch ms.At(i).Name() {
				case "active":
					assert.False(t, validatedMetrics["active"], "Found a duplicate in the metrics slice: active")
					validatedMetrics["active"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Amount of active memory", ms.At(i).Description())
					assert.Equal(t, "bytes", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("hostname")
					assert.True(t, ok)
					assert.EqualValues(t, "hostname-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("os")
					assert.True(t, ok)
					assert.EqualValues(t, "os-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("arch")
					assert.True(t, ok)
					assert.EqualValues(t, "arch-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("type")
					assert.True(t, ok)
					assert.EqualValues(t, "type-val", attrVal.Str())
				case "blocks_received":
					assert.False(t, validatedMetrics["blocks_received"], "Found a duplicate in the metrics slice: blocks_received")
					validatedMetrics["blocks_received"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Blocks received from a block device per second", ms.At(i).Description())
					assert.Equal(t, "blocks", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("hostname")
					assert.True(t, ok)
					assert.EqualValues(t, "hostname-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("os")
					assert.True(t, ok)
					assert.EqualValues(t, "os-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("arch")
					assert.True(t, ok)
					assert.EqualValues(t, "arch-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("type")
					assert.True(t, ok)
					assert.EqualValues(t, "type-val", attrVal.Str())
				case "blocks_sent":
					assert.False(t, validatedMetrics["blocks_sent"], "Found a duplicate in the metrics slice: blocks_sent")
					validatedMetrics["blocks_sent"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Blocks sent to a block device per second", ms.At(i).Description())
					assert.Equal(t, "blocks", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("hostname")
					assert.True(t, ok)
					assert.EqualValues(t, "hostname-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("os")
					assert.True(t, ok)
					assert.EqualValues(t, "os-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("arch")
					assert.True(t, ok)
					assert.EqualValues(t, "arch-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("type")
					assert.True(t, ok)
					assert.EqualValues(t, "type-val", attrVal.Str())
				case "buffered":
					assert.False(t, validatedMetrics["buffered"], "Found a duplicate in the metrics slice: buffered")
					validatedMetrics["buffered"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Amount of memory used as buffers", ms.At(i).Description())
					assert.Equal(t, "bytes", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("hostname")
					assert.True(t, ok)
					assert.EqualValues(t, "hostname-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("os")
					assert.True(t, ok)
					assert.EqualValues(t, "os-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("arch")
					assert.True(t, ok)
					assert.EqualValues(t, "arch-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("type")
					assert.True(t, ok)
					assert.EqualValues(t, "type-val", attrVal.Str())
				case "cached":
					assert.False(t, validatedMetrics["cached"], "Found a duplicate in the metrics slice: cached")
					validatedMetrics["cached"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Amount of memory used as cache", ms.At(i).Description())
					assert.Equal(t, "bytes", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("hostname")
					assert.True(t, ok)
					assert.EqualValues(t, "hostname-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("os")
					assert.True(t, ok)
					assert.EqualValues(t, "os-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("arch")
					assert.True(t, ok)
					assert.EqualValues(t, "arch-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("type")
					assert.True(t, ok)
					assert.EqualValues(t, "type-val", attrVal.Str())
				case "context_switches":
					assert.False(t, validatedMetrics["context_switches"], "Found a duplicate in the metrics slice: context_switches")
					validatedMetrics["context_switches"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of context switches per second", ms.At(i).Description())
					assert.Equal(t, "switches", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("hostname")
					assert.True(t, ok)
					assert.EqualValues(t, "hostname-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("os")
					assert.True(t, ok)
					assert.EqualValues(t, "os-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("arch")
					assert.True(t, ok)
					assert.EqualValues(t, "arch-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("type")
					assert.True(t, ok)
					assert.EqualValues(t, "type-val", attrVal.Str())
				case "free":
					assert.False(t, validatedMetrics["free"], "Found a duplicate in the metrics slice: free")
					validatedMetrics["free"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Amount of idle memory", ms.At(i).Description())
					assert.Equal(t, "bytes", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("hostname")
					assert.True(t, ok)
					assert.EqualValues(t, "hostname-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("os")
					assert.True(t, ok)
					assert.EqualValues(t, "os-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("arch")
					assert.True(t, ok)
					assert.EqualValues(t, "arch-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("type")
					assert.True(t, ok)
					assert.EqualValues(t, "type-val", attrVal.Str())
				case "idle_time":
					assert.False(t, validatedMetrics["idle_time"], "Found a duplicate in the metrics slice: idle_time")
					validatedMetrics["idle_time"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Time spent idle", ms.At(i).Description())
					assert.Equal(t, "seconds", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("hostname")
					assert.True(t, ok)
					assert.EqualValues(t, "hostname-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("os")
					assert.True(t, ok)
					assert.EqualValues(t, "os-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("arch")
					assert.True(t, ok)
					assert.EqualValues(t, "arch-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("type")
					assert.True(t, ok)
					assert.EqualValues(t, "type-val", attrVal.Str())
				case "inactive":
					assert.False(t, validatedMetrics["inactive"], "Found a duplicate in the metrics slice: inactive")
					validatedMetrics["inactive"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Amount of inactive memory", ms.At(i).Description())
					assert.Equal(t, "bytes", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("hostname")
					assert.True(t, ok)
					assert.EqualValues(t, "hostname-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("os")
					assert.True(t, ok)
					assert.EqualValues(t, "os-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("arch")
					assert.True(t, ok)
					assert.EqualValues(t, "arch-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("type")
					assert.True(t, ok)
					assert.EqualValues(t, "type-val", attrVal.Str())
				case "interrupts":
					assert.False(t, validatedMetrics["interrupts"], "Found a duplicate in the metrics slice: interrupts")
					validatedMetrics["interrupts"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of interrupts per second, including the clock", ms.At(i).Description())
					assert.Equal(t, "interrupts", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("hostname")
					assert.True(t, ok)
					assert.EqualValues(t, "hostname-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("os")
					assert.True(t, ok)
					assert.EqualValues(t, "os-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("arch")
					assert.True(t, ok)
					assert.EqualValues(t, "arch-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("type")
					assert.True(t, ok)
					assert.EqualValues(t, "type-val", attrVal.Str())
				case "io_wait_time":
					assert.False(t, validatedMetrics["io_wait_time"], "Found a duplicate in the metrics slice: io_wait_time")
					validatedMetrics["io_wait_time"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Time spent waiting for IO", ms.At(i).Description())
					assert.Equal(t, "seconds", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("hostname")
					assert.True(t, ok)
					assert.EqualValues(t, "hostname-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("os")
					assert.True(t, ok)
					assert.EqualValues(t, "os-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("arch")
					assert.True(t, ok)
					assert.EqualValues(t, "arch-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("type")
					assert.True(t, ok)
					assert.EqualValues(t, "type-val", attrVal.Str())
				case "runnable_procs":
					assert.False(t, validatedMetrics["runnable_procs"], "Found a duplicate in the metrics slice: runnable_procs")
					validatedMetrics["runnable_procs"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of runnable processes", ms.At(i).Description())
					assert.Equal(t, "processes", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("hostname")
					assert.True(t, ok)
					assert.EqualValues(t, "hostname-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("os")
					assert.True(t, ok)
					assert.EqualValues(t, "os-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("arch")
					assert.True(t, ok)
					assert.EqualValues(t, "arch-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("type")
					assert.True(t, ok)
					assert.EqualValues(t, "type-val", attrVal.Str())
				case "stolen_time":
					assert.False(t, validatedMetrics["stolen_time"], "Found a duplicate in the metrics slice: stolen_time")
					validatedMetrics["stolen_time"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Time stolen from a virtual machine", ms.At(i).Description())
					assert.Equal(t, "seconds", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("hostname")
					assert.True(t, ok)
					assert.EqualValues(t, "hostname-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("os")
					assert.True(t, ok)
					assert.EqualValues(t, "os-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("arch")
					assert.True(t, ok)
					assert.EqualValues(t, "arch-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("type")
					assert.True(t, ok)
					assert.EqualValues(t, "type-val", attrVal.Str())
				case "swap_in":
					assert.False(t, validatedMetrics["swap_in"], "Found a duplicate in the metrics slice: swap_in")
					validatedMetrics["swap_in"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Amount of memory swapped in from disk", ms.At(i).Description())
					assert.Equal(t, "bytes", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("hostname")
					assert.True(t, ok)
					assert.EqualValues(t, "hostname-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("os")
					assert.True(t, ok)
					assert.EqualValues(t, "os-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("arch")
					assert.True(t, ok)
					assert.EqualValues(t, "arch-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("type")
					assert.True(t, ok)
					assert.EqualValues(t, "type-val", attrVal.Str())
				case "swap_out":
					assert.False(t, validatedMetrics["swap_out"], "Found a duplicate in the metrics slice: swap_out")
					validatedMetrics["swap_out"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Amount of memory swapped to a block device", ms.At(i).Description())
					assert.Equal(t, "bytes", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("hostname")
					assert.True(t, ok)
					assert.EqualValues(t, "hostname-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("os")
					assert.True(t, ok)
					assert.EqualValues(t, "os-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("arch")
					assert.True(t, ok)
					assert.EqualValues(t, "arch-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("type")
					assert.True(t, ok)
					assert.EqualValues(t, "type-val", attrVal.Str())
				case "swapped":
					assert.False(t, validatedMetrics["swapped"], "Found a duplicate in the metrics slice: swapped")
					validatedMetrics["swapped"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Amount of virtual memory used", ms.At(i).Description())
					assert.Equal(t, "bytes", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("hostname")
					assert.True(t, ok)
					assert.EqualValues(t, "hostname-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("os")
					assert.True(t, ok)
					assert.EqualValues(t, "os-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("arch")
					assert.True(t, ok)
					assert.EqualValues(t, "arch-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("type")
					assert.True(t, ok)
					assert.EqualValues(t, "type-val", attrVal.Str())
				case "system_time":
					assert.False(t, validatedMetrics["system_time"], "Found a duplicate in the metrics slice: system_time")
					validatedMetrics["system_time"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Time spent running kernel code (system time)", ms.At(i).Description())
					assert.Equal(t, "seconds", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("hostname")
					assert.True(t, ok)
					assert.EqualValues(t, "hostname-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("os")
					assert.True(t, ok)
					assert.EqualValues(t, "os-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("arch")
					assert.True(t, ok)
					assert.EqualValues(t, "arch-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("type")
					assert.True(t, ok)
					assert.EqualValues(t, "type-val", attrVal.Str())
				case "total_procs":
					assert.False(t, validatedMetrics["total_procs"], "Found a duplicate in the metrics slice: total_procs")
					validatedMetrics["total_procs"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total number of processes", ms.At(i).Description())
					assert.Equal(t, "processes", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("hostname")
					assert.True(t, ok)
					assert.EqualValues(t, "hostname-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("os")
					assert.True(t, ok)
					assert.EqualValues(t, "os-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("arch")
					assert.True(t, ok)
					assert.EqualValues(t, "arch-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("type")
					assert.True(t, ok)
					assert.EqualValues(t, "type-val", attrVal.Str())
				case "user_time":
					assert.False(t, validatedMetrics["user_time"], "Found a duplicate in the metrics slice: user_time")
					validatedMetrics["user_time"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Time spent running non-kernel code (user time, including nice time)", ms.At(i).Description())
					assert.Equal(t, "seconds", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("hostname")
					assert.True(t, ok)
					assert.EqualValues(t, "hostname-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("os")
					assert.True(t, ok)
					assert.EqualValues(t, "os-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("arch")
					assert.True(t, ok)
					assert.EqualValues(t, "arch-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("type")
					assert.True(t, ok)
					assert.EqualValues(t, "type-val", attrVal.Str())
				}
			}
		})
	}
}
